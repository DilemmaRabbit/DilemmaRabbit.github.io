<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
        <title>LeetCode - Tag - Dilemma Rabbit</title>
        <link>https://DilemmaRabbit.github.io/tags/leetcode/</link>
        <description>LeetCode - Tag - Dilemma Rabbit</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>a21663832@gmail.com (dilemmarabbit)</managingEditor>
            <webMaster>a21663832@gmail.com (dilemmarabbit)</webMaster><lastBuildDate>Fri, 11 Mar 2022 13:23:24 &#43;0800</lastBuildDate><atom:link href="https://DilemmaRabbit.github.io/tags/leetcode/" rel="self" type="application/rss+xml" /><item>
    <title>2. Add Two Numbers</title>
    <link>https://DilemmaRabbit.github.io/leetcode/2.-add-two-numbers/</link>
    <pubDate>Fri, 11 Mar 2022 13:23:24 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/2.-add-two-numbers/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
 問題描述 給予兩條 linked list，代表從個位數開始的兩組數字，回傳一條代表這兩組數字加總的 linked list
 思路  利用自創的一個 Node 當作哨兵節點 計算每個回合當下的加總以及進位 兩條 linked list 同時遍歷，當 next 等於空指標時代表某一條到底，下次開始把加總的值設為 0 當兩個指標都是空指標值代表加總完畢並退出 最後考慮最後一次的進位   程式碼 class Solution { public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { int carry = 0; int sum = 0; int val1,val2; ListNode *tmp; ListNode *head = new ListNode(10); // 哨兵節點  tmp = head; // 當兩條 linked list 都結束時退出  while(l1 || l2){ if(l1 == NULL) val1 = 0; // 確定 linked list 是否結束  else val1 = l1 -&gt; val; if(l2 == NULL) val2 = 0; // 確定 linked list 是否結束  else val2 = l2 -&gt; val; sum = val1 + val2 + carry; // 計算當前加總  carry = sum / 10; // 計算進位  tmp -&gt; next = new ListNode(sum % 10); // 產生新節點  tmp = tmp -&gt; next; if(l1) l1 = l1 -&gt; next; // 避免進入空指標  if(l2) l2 = l2 -&gt; next; // 避免進入空指標  } if(carry == 1) tmp -&gt; next = new ListNode(1); // 最後的進位  return head-&gt;next; } }; ]]></description>
</item><item>
    <title>82. Remove Duplicates From Sorted List II</title>
    <link>https://DilemmaRabbit.github.io/leetcode/82.-remove-duplicates-from-sorted-list-ii/</link>
    <pubDate>Wed, 09 Mar 2022 11:05:07 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/82.-remove-duplicates-from-sorted-list-ii/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
 問題描述 給予一條已排列的 linked list，刪除所有不唯一的節點，返回一條排序後的 linked list
 思路 個人思路
 先將重複的 node 刪除，並將重複的值紀錄在 hash map 中 根據 hash map 元素刪除表中的元素(不包含頭) 根據 hash map 元素刪除頭的重複元素  解答思路
 產生一個哨兵(sentinel)節點接上 head，就不用在考慮單獨處理 head 的情況 用一個 prev 節點當作新的定位點(不重複的元素/第一個重複的元素) 用 head 去遍歷重複的狀況，視情況用 prev 去指到新的不重複 回傳 sentinel 節點的 next   程式碼 # 個人思路 class Solution { public: ListNode* deleteDuplicates(ListNode* head) { if(head == NULL || head-&gt;next == NULL) return head; ListNode *slow,*fast; slow = head; fast = head -&gt; next; map&lt;int, bool&gt; table; while(fast !]]></description>
</item><item>
    <title>141. Linked List Cycle</title>
    <link>https://DilemmaRabbit.github.io/leetcode/141.-linked-list-cycle/</link>
    <pubDate>Tue, 08 Mar 2022 10:23:50 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/141.-linked-list-cycle/</guid>
    <description><![CDATA[難度：🟢 Easy 🟢
 問題描述 給予一條可能產生迴圈的 linked list，返回 true or false 表示有無迴圈。
測資：-105 &lt;= Node.val &lt;= 105
 思路 遍歷節點，並將節點改為範圍外的數字，假設碰到範圍外的數字則代表進入迴圈。
 程式碼 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public: bool hasCycle(ListNode *head) { ListNode *tmp = head; while(tmp != NULL){ if(tmp-&gt;val != 100001) tmp-&gt;val = 100001; else return true; tmp = tmp-&gt;next; } return false; } }; ]]></description>
</item><item>
    <title>21. Merge Two Sorted Lists</title>
    <link>https://DilemmaRabbit.github.io/leetcode/21.-merge-two-sorted-lists/</link>
    <pubDate>Mon, 07 Mar 2022 21:13:08 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/21.-merge-two-sorted-lists/</guid>
    <description><![CDATA[難度：🟢 Easy 🟢
 問題描述 給定兩條已排序的 linked list，合併為一條排序的 linked list
測資
 每條 node 數量 &lt; 50 -100 &lt;= Node.val &lt;= 100   思路 產生一個新的list head，用兩個 pointer 紀錄目前 list1 與 list2 位置，並比較大小決定下一個節點，直到其中一條結束，再由另一條補上
 程式碼 class Solution { public: ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode *list=NULL; ListNode *head=NULL; ListNode *tmp=NULL; if(list1==NULL){ return list2; } if(list2==NULL){ return list1; } while(list1!=NULL &amp;&amp; list2!=NULL){ if(list1 -&gt; val &gt;= list2 -&gt; val){ tmp = list2; list2 = list2 -&gt; next; tmp-&gt;next = NULL; } else{ tmp = list1; list1 = list1 -&gt; next; tmp-&gt;next = NULL; } if(head==NULL){ head = tmp; list = tmp; } else{ list -&gt; next = tmp; list = list -&gt; next; } if(list1 == NULL || list2 == NULL){ break; } } if(list1){ list-&gt;next=list1; } if(list2){ list-&gt;next=list2; } return head; } };  ]]></description>
</item><item>
    <title>258. Add Digits</title>
    <link>https://DilemmaRabbit.github.io/leetcode/258.-add-digits/</link>
    <pubDate>Tue, 08 Feb 2022 16:04:48 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/258.-add-digits/</guid>
    <description><![CDATA[難度：🟢 Easy 🟢
 問題描述 將一個正整數的所有位數做加總，直到只剩下個位數，並返回該值。
測資 -1 &lt; num &lt; 2^32 。
 思路 只計算當次的個位數，如果大於 10 代表只保留個位數並 +1，算至最後 num 為 0 。
 程式碼 class Solution { public: int addDigits(int num) { int cur = 0; // initial answer  while(num != 0){ cur += num%10; // add tail number  if(cur &gt;= 10){ // if cur &gt; 0, remain tail and + 1  cur = cur % 10 + 1; } num /= 10; } return cur; } }; ]]></description>
</item></channel>
</rss>
