<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
        <title>LeetCode - Tag - Dilemma Rabbit</title>
        <link>https://DilemmaRabbit.github.io/tags/leetcode/</link>
        <description>LeetCode - Tag - Dilemma Rabbit</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>a21663832@gmail.com (dilemmarabbit)</managingEditor>
            <webMaster>a21663832@gmail.com (dilemmarabbit)</webMaster><lastBuildDate>Wed, 28 Sep 2022 12:06:26 &#43;0800</lastBuildDate><atom:link href="https://DilemmaRabbit.github.io/tags/leetcode/" rel="self" type="application/rss+xml" /><item>
    <title>19. Remove Nth Node From End of List</title>
    <link>https://DilemmaRabbit.github.io/leetcode/19.-remove-nth-node-from-end-of-list/</link>
    <pubDate>Wed, 28 Sep 2022 12:06:26 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/19.-remove-nth-node-from-end-of-list/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 給予一條串列與整數 n，回傳減去倒數第 n 個節點的串列
思路 two pointer
利用兩個快慢指標，之間的距離代表了倒數 n 個的狀況，快指標到達節點末端時，慢指標到了目標節點 重新利用一次快指標，讓快指標到達目標節點的前一個節點 重新串接串列 如何不讓快指標重新遍歷一次？
預先設定一個只向 head 的哨兵節點，與快慢指標同時移動 會多花時間與空間產生新節點 程式碼 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* guard = new ListNode(0, head); ListNode* target = head; ListNode* tmp = head; while(--n) tmp = tmp -&gt; next; while(tmp -&gt; next !]]></description>
</item><item>
    <title>838. Push Dominoes</title>
    <link>https://DilemmaRabbit.github.io/leetcode/838.-push-dominoes/</link>
    <pubDate>Tue, 27 Sep 2022 14:42:21 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/838.-push-dominoes/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 給予一個字串 dominoes，代表骨牌的方向，&ldquo;R&rdquo; , &ldquo;L&rdquo; 分別代表往左/右推，&quot;.&quot; 則代表不被推動的骨牌，求依據字串推倒後的骨牌呈現狀況
思路 當 &ldquo;左&rdquo; 、 &ldquo;右&rdquo; 各有 &ldquo;右&rdquo; 、 &ldquo;左&rdquo; 推的骨牌時，靠近右推/左推的骨牌會變成右/左，如果剛好位於正中間，則會處於平衡狀態 記錄這個骨牌被左推/右推的比例，決定靠向哪一邊 two vector
兩個長度為骨牌長度的陣列，分別代表左推/右推的狀況 從左至右遍歷(右推狀況)第一個陣列 &ldquo;R&rdquo;，將 tmp 設為最大值(100000)，代表開始遞減比重 &ldquo;L&rdquo;，將 tmp 歸零，代表從頭開始 &ldquo;.&quot;，如果左邊不是 &ldquo;R&rdquo;(tmp = 0) 的狀況，直接為 0 ，否則加上比重並 tmp&ndash; 從右至左遍歷(左推狀況)第二個陣列 &ldquo;R&rdquo;，將 tmp 歸零，代表從頭開始 &ldquo;L&rdquo;，將 tmp 設為最小值(-100000)，代表開始遞增比重 &ldquo;.&quot;，如果左邊不是 &ldquo;R&rdquo;(tmp = 0) 的狀況，直接為 0 ，否則加上比重並 tmp++ 相加兩個陣列，如果為零代表平衡、負數代表左推、正數代表右推 two pointer
與上述作法用兩個不同方面的 pointer 改善，減少一個陣列以及 for 循環 是否能在一個方向的遍歷完成?
是否不需要額外的陣列完成?
程式碼 class Solution { public: // two pointer string pushDominoes(string dominoes) { vector&lt;int&gt; map(dominoes.]]></description>
</item><item>
    <title>990. Satisfiability of Equality Equations</title>
    <link>https://DilemmaRabbit.github.io/leetcode/990.-satisfiability-of-equality-equations/</link>
    <pubDate>Mon, 26 Sep 2022 17:06:04 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/990.-satisfiability-of-equality-equations/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 給予一個包含兩種狀況的判斷式，&ldquo;a==b&rdquo;、&ldquo;a!=b&rdquo;，判斷所有的判斷式是否合理，回傳 true/false
思路 Union find 把每個字母進行編號(分別代表不同的群組) 當 &ldquo;==&quot;，把右邊字母的群組改成左邊字母的群組 假如右邊字母的群組不是原本的群組(被歸類過)，則在找到源頭為止，把所有的源頭都改成左邊字母的群組 完成分群後，掃過每一個 &ldquo;!=&quot;，當兩邊字母在同群組時，判斷為失敗 程式碼 class Solution { public: std::vector&lt;int&gt; group; int find_leader(int cur){ if(group[cur] == cur) return cur; else{ group[cur] = find_leader(group[cur]); return group[cur]; } } void merge(int prev, int after){ int g1 = find_leader(prev-97); int g2 = find_leader(after-97); if(g1 != g2){ group[g2] = g1; } } bool equationsPossible(vector&lt;string&gt;&amp; equations) { for(int i = 0; i &lt; 26; i++) group.]]></description>
</item><item>
    <title>622. Design Circular Queue</title>
    <link>https://DilemmaRabbit.github.io/leetcode/622.-design-circular-queue/</link>
    <pubDate>Sun, 25 Sep 2022 16:37:19 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/622.-design-circular-queue/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 完成一個循環佇列(FIFO)的結構，須包含以下功能
MyCircularQueue(k)：產生一條長度為 k 的駐列 int fornt()：回傳目前 head 的值，如果不存在，回傳 -1 int rear()：回傳目前 tail 的值，如果不存在，回傳 -1 boolean enQueue(int value)：新增新值到 queue 的尾端，如果操作失敗(佇列滿了)，回傳 false boolean deQueue()：移除目前 head 的值，如果操作失敗(佇列為空)，回傳 false boolean isEmpty()：回傳目前 queue 是否為空的狀況 boolean isFull()：回傳目前 queue 是否為滿的狀況 思路 用兩個 pointer (front/rear) 來追蹤目前的頭與尾 移除不用真的移除 queue 內原本資料，修改新的 front 就好 移除需要考慮移除到空的處理 full/empty 用 front 與 rear 來判斷 程式碼 class MyCircularQueue { public: vector&lt;int&gt; queue; int end; int front; int rear; // 檢查遍歷用 // void check(string s){ // cout &lt;&lt; s &lt;&lt; endl; // for(int i = 0; i &lt; queue.]]></description>
</item><item>
    <title>985. Sum of Even Numbers After Queries</title>
    <link>https://DilemmaRabbit.github.io/leetcode/985.-sum-of-even-numbers-after-queries/</link>
    <pubDate>Wed, 21 Sep 2022 11:43:56 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/985.-sum-of-even-numbers-after-queries/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 給予兩個陣列 nums / queries，queries[i][0]代表增加的數值，queries[i][1]代表需要增加的 nums index，每次計算完後，只紀錄 nums 中的偶數總和，回傳一個與 nums 大小相同的結果陣列
思路 需要重複計算的部分為每次修改完 nums 後，重新進行總和的部分，因此可以先將總和計算出來，依據當前回合的結果，判斷需要加或減的部分，直接對總和進行運算，最後再更新新的結果到 nums 上，省去每次遍歷的過程
程式碼 class Solution { public: vector&lt;int&gt; sumEvenAfterQueries(vector&lt;int&gt;&amp; nums, vector&lt;vector&lt;int&gt;&gt;&amp; queries) { vector&lt;int&gt; res; int tmp = 0; for(int i = 0; i &lt; nums.size(); i++){ if(nums[i] % 2 == 0) tmp += nums[i]; } for(int i = 0; i &lt; queries.size(); i++){ if((nums[queries[i][1]] + queries[i][0]) % 2 == 0){ // 如果加總後是偶數 if(nums[queries[i][1]] % 2 == 0){ tmp += queries[i][0]; // 偶數的情況下，因為結果已經具有了原數值，只需要加上增減的部分 } else{ tmp += nums[queries[i][1]] + queries[i][0]; // 奇數的情況下便加上總和 } } else{ // 如果加總後是奇數 if(nums[queries[i][1]] % 2 == 0){ tmp -= nums[queries[i][1]]; // 原本是偶數的狀況下，要減掉自身 } // 奇數變奇數，不會更新結果，只需要更新 nums } nums[queries[i][1]] = nums[queries[i][1]] + queries[i][0]; // 更新 nums res.]]></description>
</item><item>
    <title>718. Maximum Length of Repeated Subarray</title>
    <link>https://DilemmaRabbit.github.io/leetcode/718.-maximum-length-of-repeated-subarray/</link>
    <pubDate>Tue, 20 Sep 2022 12:02:49 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/718.-maximum-length-of-repeated-subarray/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠 問題描述 給與兩個 array，返回最長公共子陣列的最大值
思路 每次比對到相同的元素，便去尋找上一個比對的結果並 + 1 //正序 dp[i][j] = dp[i-1][j-1] + 1 //倒序 dp[i][j] = dp[i-1][j-1] + 1 需要注意處理邊界的狀況 每次更新後比較最大值 BigO:O(n*m)
程式碼 class Solution { public: int findLength(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) { int res = INT_MIN; int dp[nums1.size()][nums2.size()]; memset(dp, 0, sizeof(dp)); // 倒序 dp // for(int i = nums1.size()-1; i &gt; -1; i--){ // for(int j = nums2.size()-1; j &gt; -1; j--){ // if(nums1[i] == nums2[j]){ // if(i == nums1.]]></description>
</item><item>
    <title>20. Valid Parentheses</title>
    <link>https://DilemmaRabbit.github.io/leetcode/20.-valid-parentheses/</link>
    <pubDate>Sun, 13 Mar 2022 12:04:42 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/20.-valid-parentheses/</guid>
    <description><![CDATA[難度：🟢 Easy 🟢
問題描述 給予一個只包含了大中小括號的字串，使用以下規則來確定此字串是否合法
每種括號都必須閉合(左右對稱) 括號必須以正確的順序進行閉合 &ldquo;{ } ( ) []&rdquo; &ldquo;( [ { } ] )&rdquo; 思路 個人思路
由於必須進行閉合，因此可以確保一定是存在相對的括號 由於需要進行指定順序閉合，當遇到右括號時，代表上一個一定是對應的左括號，否則不合法 用 stack 儲存遇到所有的左括號，遇到右括號則比對目前的 stack top 是否正確 假如正確則 pop 成對的括號 最後 stack 必定為空 程式碼 class Solution { public: bool isValid(string s) { stack&lt;char&gt; st; for(auto chr : s){ if(chr == &#39;}&#39; || chr == &#39;]&#39; || chr == &#39;)&#39;){ // 如果為右括號 if(st.empty()){ // 確保是否為空 return false; } else{ if(chr-1 == st.]]></description>
</item><item>
    <title>138. Copy List With Random Pointer</title>
    <link>https://DilemmaRabbit.github.io/leetcode/138.-copy-list-with-random-pointer/</link>
    <pubDate>Sat, 12 Mar 2022 14:44:13 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/138.-copy-list-with-random-pointer/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 給予一條 linked list，除了 next 指標之外還有一條連接到其他節點的 random 指標
複製出一條 linked list 擁有相同的結構
思路 個人思路
由於對一條串列來說，random 是指向串列中其中一個節點，用 hash table 模仿這個行為 當產生一個新節點時，對照原本原串列的位址產生一個 hash table 的對照，並先將 next 部份完成 最後遍歷每個原串列節點的 random，將對應過去的新串列的位置給新的 random 值 程式碼 class Solution { public: Node* copyRandomList(Node* head) { map&lt;Node*,Node*&gt; table; // 建立 hash map Node* newList = new Node(0); // 哨兵節點 Node* cur = newList; // 紀錄新串列的節點位置 Node* tmp = head; // 紀錄舊串列的節點位置 while(tmp){ cur -&gt; next = new Node(tmp-&gt;val); // 根據舊串列的值產生新節點 cur = cur -&gt; next; table[tmp] = cur; // 紀錄當前新舊串列的對照狀況 tmp = tmp -&gt; next; } tmp = head; // 回到原點 cur = newList-&gt;next; // 回到原點 while(tmp){ cur -&gt; random = table[tmp -&gt; random]; // 將新串列的 random 以舊串列的對照給予 tmp = tmp -&gt; next; cur = cur -&gt; next; } return newList-&gt;next; } }; ]]></description>
</item><item>
    <title>61. Rotate List</title>
    <link>https://DilemmaRabbit.github.io/leetcode/61.-rotate-list/</link>
    <pubDate>Fri, 11 Mar 2022 13:31:35 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/61.-rotate-list/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 給予一條 linked list 以及 k，代表這個 linked list 向右位移 k 個單位(最末尾會變成新的 head)，回傳最後的 linked list
思路 個人思路(雙指標)
讓快慢指標先距離 k 個單位(需要用一個 cnt 預先計算好最小的距離，否則會 TLE) 快慢指標同時移動直到快指標移動到尾部 將快指標的尾部接上原本的頭，慢指標 next 當作新的頭，並將慢指標當作尾部(指向空指標) 解答思路(單指標)
一樣先紀錄 cnt 數量，並讓指標移動到 k 個單位的位置 將指標的尾部直接接上頭，形成一條循環 linked list 移動到目標位置 cnt - (k % cnt)，並設定新的頭以及尾 程式碼 // 個人方法 class Solution { public: ListNode* rotateRight(ListNode* head, int k) { if(!head) return head; int cnt = 0; ListNode *fast, *slow; fast = head; slow = head; while(slow){ slow = slow-&gt;next; cnt++; // 紀錄總共的節點數量 } slow = head; // 慢指標回復到原本位置 for(int i = 0; i &lt; k % cnt; i++){ if(fast -&gt; next) fast = fast-&gt;next; // 快指標前進到目標位置 } while(fast -&gt; next !]]></description>
</item><item>
    <title>2. Add Two Numbers</title>
    <link>https://DilemmaRabbit.github.io/leetcode/2.-add-two-numbers/</link>
    <pubDate>Fri, 11 Mar 2022 13:23:24 &#43;0800</pubDate><author>a21663832@gmail.com</author><dc:creator>dilemmarabbit</dc:creator><guid>https://DilemmaRabbit.github.io/leetcode/2.-add-two-numbers/</guid>
    <description><![CDATA[難度：🟠 Normal 🟠
問題描述 給予兩條 linked list，代表從個位數開始的兩組數字，回傳一條代表這兩組數字加總的 linked list
思路 利用自創的一個 Node 當作哨兵節點 計算每個回合當下的加總以及進位 兩條 linked list 同時遍歷，當 next 等於空指標時代表某一條到底，下次開始把加總的值設為 0 當兩個指標都是空指標值代表加總完畢並退出 最後考慮最後一次的進位 程式碼 class Solution { public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { int carry = 0; int sum = 0; int val1,val2; ListNode *tmp; ListNode *head = new ListNode(10); // 哨兵節點 tmp = head; // 當兩條 linked list 都結束時退出 while(l1 || l2){ if(l1 == NULL) val1 = 0; // 確定 linked list 是否結束 else val1 = l1 -&gt; val; if(l2 == NULL) val2 = 0; // 確定 linked list 是否結束 else val2 = l2 -&gt; val; sum = val1 + val2 + carry; // 計算當前加總 carry = sum / 10; // 計算進位 tmp -&gt; next = new ListNode(sum % 10); // 產生新節點 tmp = tmp -&gt; next; if(l1) l1 = l1 -&gt; next; // 避免進入空指標 if(l2) l2 = l2 -&gt; next; // 避免進入空指標 } if(carry == 1) tmp -&gt; next = new ListNode(1); // 最後的進位 return head-&gt;next; } }; ]]></description>
</item></channel>
</rss>
